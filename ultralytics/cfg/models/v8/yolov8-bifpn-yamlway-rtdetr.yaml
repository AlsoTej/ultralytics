nc: 2
scales:
  s: [1.0, 1.0, 1536]
backbone:
  - [-1, 1, nn.Identity, []] #0

  #CNN
  - [0, 1, TorchVision, [768, "convnext_tiny", "DEFAULT", True, 2, True]]  # - 1
  - [-1, 1, Index, [192, 4]]  #  (1, 192, 80, 80) - 2
  - [1, 1, Index, [384, 6]]  # (1, 384, 40, 40) - 3
  - [1, 1, Index, [768, 8]]  #  (1, 768, 20, 20) - 4
  
  # Swin track
  - [0, 1, TorchVision, [768, swin_t, DEFAULT, True, 4, True]] #5
  - [-1, 1, Index, [192 ,4]] #6
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #7 (1, 192, 80, 80)
  - [5, 1, Index, [384, 6]] #8
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #9 (1, 384, 40, 40)
  - [5, 1, Index, [768, 9]] #10
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #11 (1, 768, 20, 20)

  #concat
  - [[2, 7], 1, Concat, [1]] # 12 (1, 384, 80, 80)
  - [-1, 1, EMA, [384]] # 13 (1, 384, 80, 80)
  - [-1, 1, Conv, [384, 1, 1]] #14 (1, 256, 80, 80) C - make channels same C3/P3
  
  - [[3, 9], 1, Concat, [1]] # 15 (1, 768, 40, 40)
  - [-1, 1, EMA, [768]] # 16 (1, 768, 40, 40)
  - [-1, 1, Conv, [384, 1, 1]] #17 (1, 256, 40, 40) B - make channels same C4/P4
  
  - [[4, 11], 1, Concat, [1]] # 18 (1, 1536, 20, 20)
  - [-1, 1, EMA, [1536]] # 19 (1, 1536, 20, 20)
  - [-1, 1, Conv, [384, 1, 1]] # 20 (1, 256, 20, 20) A - make channels same C5/P5

head:
############################################################################################BLOCK 1
     # P6 from P5
  - [-1,1,DepthwiseConvBlock,[384,3,2]] # P6 from P5
  
  # Generate P7 from P6 (ReLU + Downsampling)
  - [-1, 1, ReLU]  # Apply ReLU before Conv
  - [-1, 1, ConvBlock, [384, 3, 2]]  # P7 from P6
  

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #21 Upsample A -> (1, 256, 40, 40)
  - [[17, -1], 1, BiFPN_Concat2, [1]] #22 AB (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #23 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #24 Upsample -> (1, 256, 80, 80)
  - [[-1, 14], 1, BiFPN_Concat2, [1]] #25 ABC = R (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #26 (1, 256, 80, 80)

  - [-1, 1, DWConv, [384, 3, 2]] #27 (1, 256, 40, 40)
  - [[-1, 23, 17],1, BiFPN_Concat3, [1]] #28 ABC + AB + B = Q (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #29 (1, 256, 40, 40)

  - [-1, 1, DWConv, [384, 3, 2]] #30 (1, 256, 20, 20)
  - [[-1, 20], 1, BiFPN_Concat2, [1]] #31 ABC + AB + B + A = P (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #32 (1, 256, 20, 20)
##########################################################################################BLOCK2
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #33 (1, 256, 40, 40) 
  - [[-1, 29], 1, BiFPN_Concat2, [1]] #34 PQ (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #35 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #36 (1, 256, 80, 80)
  - [[-1, 26], 1, BiFPN_Concat2, [1]] #37 PQR = Z (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #38 (1, 256, 80, 80)

  - [-1, 1, DWConv, [384, 3, 2]] #39 (1, 256, 40, 40)
  - [[-1, 35, 29], 1, BiFPN_Concat3, [1]] #40 PQR + PQ + Q = Y (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #41 (1, 256, 40, 40)

  - [-1, 1, DWConv, [384, 3, 2]] #42 (1, 256, 20, 20)
  - [[-1, 32], 1, BiFPN_Concat2, [1]] #43 PQR + PQ + Q + P = X (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #44 (1, 256, 20, 20)
##########################################################################################BLOCK3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 45 (1, 256, 40, 40)
  - [[-1, 41], 1, BiFPN_Concat2, [1]] # 46 XY (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #47 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #48 (1, 256, 80, 80)
  - [[-1, 38], 1, BiFPN_Concat2, [1]] #49 XYZ (1, 256, 80 80)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #50 (1, 256, 80, 80)

  - [-1, 1, DWConv, [384, 3, 2]] #51 (1, 256, 40, 40)
  - [[-1, 47, 41], 1, BiFPN_Concat3, [1]] #52 XYZ + XY + Y (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] # 53 (1, 256, 40, 40)

  - [-1, 1, DWConv, [384, 3, 2]] #54 (1, 256, 20, 20)
  - [[-1, 44], 1, BiFPN_Concat2, [1]] # 55 XYZ + XY + Y + X
  - [-1, 1, DepthwiseConvBlock, [384, 3, 1]] #56

  # - [53, 1, C3k2, [512, True]] #57
  # - [56, 1, C3k2, [1024, True]] #58

  - [[50,53,56], 1, RTDETRDecoder, [nc]]  # Pass P3, P4, P5 to Detect head (index 32) 25
  # - [[50,57,58], 1, RTDETRDecoder, [nc]]  # Pass P3, P4, P5 to Detect head (index 32) 25
  

# head:
# # Top-Down Pathway
#   - [19, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample EMA3 to match Scale 2 (index 20) 
#   - [[-1, 17], 1, Concat, [1]]                 # Concatenate EMA3 (upsampled) + EMA2 (index 21) 
#   - [-1, 1, C3k2, [512, False]]                # Apply C3k2 on concatenated features (index 22) 

#   - [22, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample to match Scale 1 (index 23) 
#   - [[-1, 15], 1, Concat, [1]]                 # Concatenate with EMA1 (index 24) 
#   - [-1, 1, C3k2, [256, False]]                # Apply C3k2 on concatenated features (index 25) 

#   # Bottom-Up Pathway
#   - [25, 1, DWConv, [256, 3, 2]]    # Downsample Scale 1 (index 26) 24
#   - [[-1, 22], 1, Concat, [1]]    # Concatenate (Scale 1 -> Scale 2) (index 27) 25
#   - [-1, 1, C3k2, [512, False]]   # Apply C3k2 (index 28) 26

#   - [28, 1, DWConv, [512, 3, 2]]    # Downsample Scale 2 (index 29) 27
#   - [[-1, 19], 1, Concat, [1]]    # Concatenate with EMA3 (Scale 3) (index 30) 28
#   - [-1, 1, C3k2, [1024, False]]  # Apply C3k2 (index 31) 29

#   # Detection
#   # - [[23, 26, 29], 1, Detect, [nc]]  # Pass P3, P4, P5 to Detect head (index 32) 30
#   - [[25, 28, 31], 1, RTDETRDecoder, [nc]]  # Pass P3, P4, P5 to Detect head (index 32) 30
