nc: 2
scales:
  s: [1.0, 1.0, 1536]
backbone:
  - [-1, 1, nn.Identity, []] #0

  #CNN
  - [0, 1, TorchVision, [768, "convnext_tiny", "DEFAULT", True, 2, True]]  # - 1
  - [-1, 1, Index, [192, 4]]  #  (1, 192, 80, 80) - 2
  - [1, 1, Index, [384, 6]]  # (1, 384, 40, 40) - 3
  - [1, 1, Index, [768, 8]]  #  (1, 768, 20, 20) - 4
  
  # Swin track
  - [0, 1, TorchVision, [768, swin_t, DEFAULT, True, 4, True]] #5
  - [-1, 1, Index, [192 ,4]]                         #6
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #7 (1, 192, 80, 80)
  - [5, 1, Index, [384, 6]]                          #8
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #9 (1, 384, 40, 40)
  - [5, 1, Index, [768, 9]]                          #10
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #11 (1, 768, 20, 20)

  #concat
  - [[2, 7], 1, Concat, [1]]                        # 12 (1, 384, 80, 80)
  - [-1, 1, EMA, [384]]                             # 13 (1, 384, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]        # 14 (1, 256, 80, 80) E - make channels same C3/P3
  
  - [[3, 9], 1, Concat, [1]]                        # 15 (1, 768, 40, 40)
  - [-1, 1, EMA, [768]]                             # 16 (1, 768, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]        # 17 (1, 256, 40, 40) D - make channels same C4/P4
  
  - [[4, 11], 1, Concat, [1]]                       # 18 (1, 1536, 20, 20)
  - [-1, 1, EMA, [1536]]                            # 19 (1, 1536, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]        # 20 (1, 256, 20, 20) C - make channels same C5/P5

    # P6 from P5
  - [20, 1, Conv, [256,3,2]]          # 21 (1, 256, 10, 10)
  
  # Generate P7 from P6 (ReLU + Downsampling)
  - [21, 1, Conv, [256, 3, 2]]        # 22 (1, 256, 5, 5)

head:
############################################################################################BLOCK 1
  

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #23 Upsample A -> (1, 256, 10, 10)
  - [[-1, 21], 1, BiFPN_Concat2, [1]]          #24(1, 256, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 2]]   #25 (1, 256, 10, 10)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #26 Upsample -> (1, 256, 20, 20)
  - [[-1, 20], 1, BiFPN_Concat2, [1]]          #27 (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #28 (1, 256, 20, 20)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #29 Upsample -> (1, 256, 40, 40)
  - [[-1, 17], 1, BiFPN_Concat2, [1]]          #30 (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #31 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #32 Upsample -> (1, 256, 80, 80)
  - [[-1, 14], 1, BiFPN_Concat2, [1]]          #33 (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #34 (1, 256, 80, 80)

  - [-1, 1, DWConv, [256, 3, 2]]               #35 Downsample ->(1, 256, 40, 40)
  - [[-1, 31, 17],1, BiFPN_Concat3, [1]]       #36 (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #37 (1, 256, 40, 40)

  - [-1, 1, DWConv, [256, 3, 2]]               #38 (1, 256, 20, 20)
  - [[-1, 28, 20], 1, BiFPN_Concat3, [1]]      #39 (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #40 (1, 256, 20, 20)

  - [-1, 1, DWConv, [256, 3, 2]]               #41 (1, 256, 10, 10)
  - [[-1, 25, 21], 1, BiFPN_Concat3, [1]]      #42 (1, 256, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #43 (1, 256, 10, 10)

  - [-1, 1, DWConv, [256, 3, 2]]               #44 (1, 256, 5, 5)
  - [[-1, 22], 1, BiFPN_Concat2, [1]]          #45 (1, 256, 5, 5)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #46 (1, 256, 5, 5)
##########################################################################################BLOCK2
  
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #47 Upsample A -> (1, 256, 10, 10)
  - [[-1, 43], 1, BiFPN_Concat2, [1]]          #48 (1, 256, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 2]]   #49 (1, 256, 10, 10)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #50 Upsample -> (1, 256, 20, 20)
  - [[-1, 40], 1, BiFPN_Concat2, [1]]          #51 (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #52 (1, 256, 20, 20)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #53 Upsample -> (1, 256, 40, 40)
  - [[-1, 37], 1, BiFPN_Concat2, [1]]          #54 (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #55 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #56 Upsample -> (1, 256, 80, 80)
  - [[-1, 34], 1, BiFPN_Concat2, [1]]          #57 (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #58 (1, 256, 80, 80)

  - [-1, 1, DWConv, [256, 3, 2]]              #59 Downsample ->(1, 256, 40, 40)
  - [[-1, 55, 37],1, BiFPN_Concat3, [1]]      #60 (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #61 (1, 256, 40, 40)

  - [-1, 1, DWConv, [256, 3, 2]]              #62 (1, 256, 20, 20)
  - [[-1, 52, 40], 1, BiFPN_Concat3, [1]]     #63 (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #64 (1, 256, 20, 20)

  - [-1, 1, DWConv, [256, 3, 2]]              #65 (1, 256, 10, 10)
  - [[-1, 49, 43], 1, BiFPN_Concat3, [1]]     #66 (1, 256, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #67 (1, 256, 10, 10)

  - [-1, 1, DWConv, [256, 3, 2]]              #68 (1, 256, 5, 5)
  - [[-1, 46], 1, BiFPN_Concat2, [1]]         #69 (1, 256, 5, 5)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #70 (1, 256, 5, 5)
##########################################################################################BLOCK3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #71 Upsample A -> (1, 256, 10, 10)
  - [[-1, 67], 1, BiFPN_Concat2, [1]]          #72 (1, 256, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 2]]   #73 (1, 256, 10, 10)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #74 Upsample -> (1, 256, 20, 20)
  - [[-1, 64], 1, BiFPN_Concat2, [1]]          #75 (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #76 (1, 256, 20, 20)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #77 Upsample -> (1, 256, 40, 40)
  - [[-1, 61], 1, BiFPN_Concat2, [1]]          #78 (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #79 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #80 Upsample -> (1, 256, 80, 80)
  - [[-1, 58], 1, BiFPN_Concat2, [1]]          #81 (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #82 (1, 256, 80, 80)

  - [-1, 1, DWConv, [256, 3, 2]]              #83 Downsample ->(1, 256, 40, 40)
  - [[-1, 79, 61],1, BiFPN_Concat3, [1]]      #84 (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #85 (1, 256, 40, 40)

  - [-1, 1, DWConv, [256, 3, 2]]              #86 (1, 256, 20, 20)
  - [[-1, 76, 64], 1, BiFPN_Concat3, [1]]     #87 (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #88 (1, 256, 20, 20)

  - [-1, 1, DWConv, [256, 3, 2]]              #89 (1, 256, 10, 10)
  - [[-1, 73, 67], 1, BiFPN_Concat3, [1]]     #90 (1, 256, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #91 (1, 256, 10, 10)

  - [-1, 1, DWConv, [256, 3, 2]]              #92 (1, 256, 5, 5)
  - [[-1, 70], 1, BiFPN_Concat2, [1]]         #93 (1, 256, 5, 5)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]  #94 (1, 256, 5, 5)

  
  # - [53, 1, C3k2, [512, True]] #57
  # - [56, 1, C3k2, [1024, True]] #58

  - [[82, 85, 88, 91, 94], 1, RTDETRDecoder, [nc, [256, 256, 256, 256, 256]]]  # Pass P3, P4, P5, P6, P7 to Detect head (index 32) 25
