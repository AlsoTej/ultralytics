# YOLOv8-Swin-T-FPN
# Based on YOLOv8n, but with Swin-T backbone and FPN neck

# Model Parameters
nc: 2 
strides: [8, 16, 32]  # Output strides
scales:
  # [depth, width, max_channels]  --  We'll start with 'n' scaling, but you can adjust
  n: [0.33, 0.25, 1024]  #  You might need s, m, l, x variants later
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# YOLOv8-Swin-T Backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, TorchVision, [768, swin_t, DEFAULT, True, 5, True]]    # 0 - Swin-T (truncated, split)
  # Extract feature maps at different scales (similar to YOLO11-Swin)
  - [0, 1, Index, [192, 4]]                                        # 1 - P3/8  (B, 80, 80, 192) - Assuming input size 640x640
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]               # 2 - P3/8  (B, 192, 80, 80)
  - [0, 1, Index, [384, 6]]                                        # 3 - P4/16 (B, 40, 40, 384)
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]               # 4 - P4/16 (B, 384, 40, 40)
  - [0, 1, Index, [768, 8]]                                        # 5 - P5/32 (B, 20, 20, 768)
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]]               # 6 - P5/32 (B, 768, 20, 20)

  #  Optionally add SPPF at the end of the backbone (like in standard YOLOv8)
  - [-1, 1, SPPF, [768, 5]]                                        # 7 - P5/32 (B, 768, 20, 20)


# YOLOv8-Swin-T Head (FPN-like)
head:
  # [from, repeats, module, args]

  # --- Upsample and Concatenate P5 with P4 ---
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]                       # 8 - (B, 768, 40, 40)
  - [[-1, 4], 1, Concat, [1]]                                      # 9 - (B, 768+384, 40, 40) = (B, 1152, 40, 40)
  - [-1, 3, C2f, [384, True]]                                    # 10 - (B, 384, 40, 40)  <-  C2f, not C3k2

  # --- Upsample and Concatenate with P3 ---
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]                       # 11 - (B, 384, 80, 80)
  - [[-1, 2], 1, Concat, [1]]                                      # 12 - (B, 384+192, 80, 80) = (B, 576, 80, 80)
  - [-1, 3, C2f, [192, True]]                                    # 13 - (B, 192, 80, 80)  <- C2f

  # ---  Branch for P3 output ---
  - [-1, 1, Conv, [192, 3, 2]]                                     # 14 - (B, 192, 40, 40)  Downsample for P4 connection
  - [[-1, 10], 1, Concat, [1]]                                     # 15 - (B, 192+384, 40, 40) = (B, 576, 40, 40)
  - [-1, 3, C2f, [384, True]]                                    # 16 - (B, 384, 40, 40)

  # --- Branch for P4 output ---
  - [-1, 1, Conv, [384, 3, 2]]                                     # 17 - (B, 384, 20, 20) Downsample for P5 connection
  - [[-1, 7], 1, Concat, [1]]                                      # 18 - (B, 384+768, 20, 20) = (B, 1152, 20, 20)
  - [-1, 3, C2f, [768, True]]                                    # 19 - (B, 768, 20, 20)

  # --- Detection Head ---
  - [[13, 16, 19], 1, Detect, [nc]]                               # 20 - Detect(P3, P4, P5)