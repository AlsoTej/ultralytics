nc: 2
scales:
  s: [1.0, 1.0, 1536]
backbone:
  - [-1, 1, nn.Identity, []] #0

  #CNN
  - [0, 1, TorchVision, [768, "convnext_tiny", "DEFAULT", True, 2, True]]  # - 1
  - [-1, 1, Index, [192, 4]]  # extracts 4th output (1, 192, 80, 80) - 2
  - [1, 1, Index, [384, 6]]  # extracts 6th output (1, 384, 40, 40) - 3
  - [1, 1, Index, [768, 8]]  # extracts 8th output (1, 768, 20, 20) - 4
  - [-1, 1, SPPF, [768, 5]] # -5
  
  # Swin track
  - [0, 1, TorchVision, [768, swin_t, DEFAULT, True, 4, True]] #6
  - [-1, 1, Index, [192 ,4]] #7
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #8 multiscale 1
  - [6, 1, Index, [384, 6]] #9
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #10 multiscale 2
  - [6, 1, Index, [768, 9]] #11
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #12
  - [-1, 1, SPPF, [768, 5]] #13 multiscale 3

  #concat
  - [[2, 8], 1, Concat, [1]] # 14 concat scale 1
  - [-1, 1, EMA, [384]] # 15 ((192 + 192 = 384}
  
  - [[3, 10], 1, Concat, [1]] # 16 concat scale 1
  - [-1, 1, EMA, [768]] # 17 ((384 + 384 = 768}
  
  - [[5, 13], 1, Concat, [1]] # 18 concat scale 1
  - [-1, 1, EMA, [1536]] # 19 ((768 + 768 = 1536}

# head:
# # Top-Down Pathway
#   - [19, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample EMA3 to match Scale 2 (index 20)
#   - [[-1, 17], 1, Concat, [1]]                 # Concatenate EMA3 (upsampled) + EMA2 (index 21)
#   - [-1, 1, C2f, [512]]                        # Apply C2f on concatenated features (index 22)

#   - [22, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample to match Scale 1 (index 23)
#   - [[-1, 15], 1, Concat, [1]]                 # Concatenate with EMA1 (index 24)
#   - [-1, 1, C2f, [256]]                        # Apply C2f on concatenated features (index 25)

#   # Bottom-Up Pathway
#   - [25, 1, Conv, [256, 3, 2]]    # Downsample Scale 1 (index 26)
#   - [[-1, 22], 1, Concat, [1]]    # Concatenate (Scale 1 -> Scale 2) (index 27)
#   - [-1, 1, C2f, [512, True]]     # Apply C2f (index 28)

#   - [28, 1, Conv, [512, 3, 2]]    # Downsample Scale 2 (index 29)
#   - [[-1, 19], 1, Concat, [1]]    # Concatenate with EMA3 (Scale 3) (index 30)
#   - [-1, 1, C2f, [1024, True]]    # Apply C2f (index 31)

#   # Detection
#   - [[25, 28, 31], 1, Detect, [nc]]  # Pass P3, P4, P5 to Detect head (index 32)

head:
# Top-Down Pathway
  - [19, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample EMA3 to match Scale 2 (index 20)
  - [[-1, 17], 1, Concat, [1]]                 # Concatenate EMA3 (upsampled) + EMA2 (index 21)
  - [-1, 1, C3k2, [512, False]]                # Apply C3k2 on concatenated features (index 22)

  - [22, 1, nn.Upsample, [None, 2, "nearest"]]  # Upsample to match Scale 1 (index 23)
  - [[-1, 15], 1, Concat, [1]]                 # Concatenate with EMA1 (index 24)
  - [-1, 1, C3k2, [256, False]]                # Apply C3k2 on concatenated features (index 25)

  # Bottom-Up Pathway
  - [25, 1, Conv, [256, 256, 3, 2]]    # Downsample Scale 1 (index 26)
  - [[-1, 22], 1, Concat, [1]]    # Concatenate (Scale 1 -> Scale 2) (index 27)
  - [-1, 1, C3k2, [512, False]]   # Apply C3k2 (index 28)

  - [28, 1, Conv, [512, 512, 3, 2]]    # Downsample Scale 2 (index 29)
  - [[-1, 19], 1, Concat, [1]]    # Concatenate with EMA3 (Scale 3) (index 30)
  - [-1, 1, C3k2, [1024, False]]  # Apply C3k2 (index 31)

  # Detection
  - [[25, 28, 31], 1, Detect, [nc]]  # Pass P3, P4, P5 to Detect head (index 32)
