nc: 2
backbone:
  - [-1, 1, nn.Identity, []] #0

  #CNN
  - [-1, 1, TorchVision, [768, "convnext_tiny", "DEFAULT", True, 2, True]]  # - 1
  - [1, 1, Index, [192, 4]]  # extracts 4th output (1, 192, 80, 80) - 2
  - [1, 1, Index, [384, 6]]  # extracts 6th output (1, 384, 40, 40) - 3
  - [1, 1, Index, [768, 8]]  # extracts 8th output (1, 768, 20, 20) - 4
  - [-1, 1, SPPF, [768, 5]] # -5
  
  # Swin track
  - [0, 1, TorchVision, [768, swin_t, DEFAULT, True, 4, True]] #6
  - [-1, 1, Index, [192 ,4]] #7
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #8 multiscale 1
  - [6, 1, Index, [384, 6]] #9
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #10 multiscale 2
  - [6, 1, Index, [768, 9]] #11
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #12
  - [-1, 1, SPPF, [768, 5]] #13 multiscale 3

  #concat
  - [[2, 8], 1, Concat, [1]] # 14 concat scale 1
  - [-1, 1, EMA, [384]] # 15 ((192 + 192 = 384}
  
  - [[3, 10], 1, Concat, [1]] # 16 concat scale 1
  - [-1, 1, EMA, [768]] # 17 ((384 + 384 = 768}
  
  - [[5, 13], 1, Concat, [1]] # 18 concat scale 1
  - [-1, 1, EMA, [1536]] # 19 ((768 + 768 = 1536}

head:
     # Top-down path (Upsampling)
  - [19, 1, nn.Upsample, [None, 2, "nearest"]] # 20
  - [[-1, 17], 1, Concat, [1]] # 21 (1536 + 768 = 2304)
  - [-1, 1, C2f, [768]] # 22

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 23
  - [[-1, 15], 1, Concat, [1]] # 24 (768 + 384 = 1152)
  - [-1, 1, C2f, [384]] # 25 P3

  # Bottom-up path (PAN)
  - [-1, 1, Conv, [384, 3, 2]] # 26
  - [[-1, 22], 1, Concat, [1]] # 27 (384 + 768 = 1152)
  - [-1, 1, C2f, [768]] # 28 P4

  - [-1, 1, Conv, [768, 3, 2]] # 29
  - [[-1, 19], 1, Concat, [1]] # 30 (768 + 1536 = 2304)
  - [-1, 1, C2f, [1536]] # 31 P5

  # Detection head
  # - [[25, 28, 31], 1, Detect, [nc, [384, 768, 1536]]]  # 32 Detect(P3, P4, P5)
  - [[25, 28, 31], 1, Detect, [nc]]  # passes all three feature maps to detection head
