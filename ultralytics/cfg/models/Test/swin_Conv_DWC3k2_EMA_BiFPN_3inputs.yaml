nc: 2
scales:
  s: [0.33, 0.25, 1024] 
  
backbone:
  - [-1, 1, nn.Identity, []] #0  
  # Swin track
  - [0, 1, TorchVision, [768, swin_t, DEFAULT, True, 4, True]] #1
  - [-1, 1, Index, [192 ,4]] #2
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #3 (1, 192, 80, 80) multiscale 1  
  - [1, 1, Index, [384, 6]] #4
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #5 (1, 384, 40, 40) multiscale 2 
  - [1, 1, Index, [768, 9]] #6 
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #7 (1, 768, 20, 20)

  # CNN
  - [0, 1, Conv, [64, 3, 2]] # 8 (1, 64, 320, 320) - (16)
  - [-1, 1, Conv, [128, 3, 2]] # 9 (1, 128, 160, 160) - (32)
  - [-1, 2, DWC3k2, [256, False, 0.25]] #10 (1, 256, 80, 80) - (64)
  - [-1, 1, Conv, [256, 3, 2]] # 11 (1, 256, 80, 80) - (64) - multiscale 1
  - [-1, 2, DWC3k2, [512, False, 0.25]] #12 (1, 512, 40, 40) - (128)
  - [-1, 1, Conv, [512, 3, 2]] # 13 (1, 512, 40, 40) - (128)
  - [-1, 2, DWC3k2, [512, True]] #14 (1, 512, 40, 40) - (128) - multiscale 2
  - [-1, 1, Conv, [1024, 3, 2]] # 15 (1, 1024, 20, 20) - (256)
  - [-1, 2, DWC3k2, [1024, True]] #16 (1, 1024, 20, 20) - (256)

  # #Concat
  - [[3, 11], 1, Concat, [1]] # 17 (1, 448, 80, 80)  (256)
  - [-1, 1, EMA, [256]]  #18
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]        # 19 (1, 512, 80, 80) E - make channels same C3/P3

  
  - [[5, 14], 1, Concat, [1]] # 20 (1, 896, 40, 40) (512)
  - [-1, 1, EMA, [512]] #21
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]        # 22 (1, 512, 40, 40) E - make channels same C3/P3


  - [[7, 16], 1, Concat, [1]] #23 (1, 1792, 20, 20) (1024)
  - [-1, 1, EMA, [1024]]  #24
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]        # 25 (1, 512, 20, 20) E - make channels same C3/P3
  
head:
############################################################################################BLOCK 1
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #26 Upsample A -> (1, 256, 40, 40)
  - [[22, -1], 1, BiFPN_Concat2, [1]]          #27 AB (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #28 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #29 Upsample -> (1, 256, 80, 80)
  - [[-1, 19], 1, BiFPN_Concat2, [1]]          #30 ABC = R (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #31 (1, 256, 80, 80)

  - [-1, 1, Conv, [256, 3, 2]]               #32 (1, 256, 40, 40)
  - [[-1, 28, 22],1, BiFPN_Concat3, [1]]       #33 ABC + AB + B = Q (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #34 (1, 256, 40, 40)

  - [-1, 1, Conv, [256, 3, 2]]               #35 (1, 256, 20, 20)
  - [[-1, 25], 1, BiFPN_Concat2, [1]]          #36 ABC + AB + B + A = P (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #37 (1, 256, 20, 20)
##########################################################################################BLOCK2
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #38 (1, 256, 40, 40) 
  - [[-1, 34], 1, BiFPN_Concat2, [1]]          #39 PQ (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #40 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #41 (1, 256, 80, 80)
  - [[-1, 31], 1, BiFPN_Concat2, [1]]          #42 PQR = Z (1, 256, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #43 (1, 256, 80, 80)

  - [-1, 1, Conv, [256, 3, 2]]               #44 (1, 256, 40, 40)
  - [[-1, 40, 34], 1, BiFPN_Concat3, [1]]      #45 PQR + PQ + Q = Y (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #46 (1, 256, 40, 40)

  - [-1, 1, Conv, [256, 3, 2]]               #47 (1, 256, 20, 20)
  - [[-1, 37], 1, BiFPN_Concat2, [1]]          #48 PQR + PQ + Q + P = X (1, 256, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #49 (1, 256, 20, 20)
##########################################################################################BLOCK3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 50 (1, 256, 40, 40)
  - [[-1, 46], 1, BiFPN_Concat2, [1]]          # 51 XY (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #52 (1, 256, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #53 (1, 256, 80, 80)
  - [[-1, 43], 1, BiFPN_Concat2, [1]]          #54 XYZ (1, 256, 80 80)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #55 (1, 256, 80, 80)

  - [-1, 1, Conv, [256, 3, 2]]               #56 (1, 256, 40, 40)
  - [[-1, 52, 46], 1, BiFPN_Concat3, [1]]      #57 XYZ + XY + Y (1, 256, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #58 (1, 256, 40, 40)

  - [-1, 1, Conv, [256, 3, 2]]               #59 (1, 256, 20, 20)
  - [[-1, 49], 1, BiFPN_Concat2, [1]]          #60 XYZ + XY + Y + X
  - [-1, 1, DepthwiseConvBlock, [256, 3, 1]]   #61

  - [[55,58,61], 1, Detect, [nc]]  # Pass P3, P4, P5 to Detect head (index 32) 25
