nc: 2
scales:
  s: [0.33, 0.25, 1024] 
  
backbone:
  - [-1, 1, nn.Identity, []] #0  
  # Swin track
  - [0, 1, TorchVision, [768, swin_t, DEFAULT, True, 4, True]] #1
  - [-1, 1, Index, [192 ,4]] #2
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #3 (1, 192, 80, 80) multiscale 1  
  - [1, 1, Index, [384, 6]] #4
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #5 (1, 384, 40, 40) multiscale 2 
  - [1, 1, Index, [768, 9]] #6 
  - [-1, 1, torchvision.ops.Permute, [[0, 3, 1, 2]]] #7 (1, 768, 20, 20)

  # CNN
  - [0, 1, Conv, [64, 3, 2]] # 8 (1, 64, 320, 320) - (16)
  - [-1, 1, Conv, [128, 3, 2]] # 9 (1, 128, 160, 160) - (32)
  - [-1, 2, DWC3k2, [256, False, 0.25]] #10 (1, 256, 80, 80) - (64)
  - [-1, 1, Conv, [256, 3, 2]] # 11 (1, 256, 80, 80) - (64) - multiscale 1
  - [-1, 2, DWC3k2, [512, False, 0.25]] #12 (1, 512, 40, 40) - (128)
  - [-1, 1, Conv, [512, 3, 2]] # 13 (1, 512, 40, 40) - (128)
  - [-1, 2, DWC3k2, [512, True]] #14 (1, 512, 40, 40) - (128) - multiscale 2
  - [-1, 1, Conv, [1024, 3, 2]] # 15 (1, 1024, 20, 20) - (256)
  - [-1, 2, DWC3k2, [1024, True]] #16 (1, 1024, 20, 20) - (256)

  # #Concat
  - [[3, 11], 1, Concat, [1]] # 17 (1, 448, 80, 80)  (256)
  - [-1, 1, EMA, [256]]  #18
  - [-1, 1, Conv, [512, 3, 1]]        # 19 (1, 512, 80, 80) E - make channels same C3/P3

  
  - [[5, 14], 1, Concat, [1]] # 20 (1, 896, 40, 40) (512)
  - [-1, 1, EMA, [512]] #21
  - [-1, 1, Conv, [512, 3, 1]]        # 22 (1, 512, 40, 40) E - make channels same C3/P3


  - [[7, 16], 1, Concat, [1]] #23 (1, 1792, 20, 20) (1024)
  - [-1, 1, EMA, [1024]]  #24
  - [-1, 1, Conv, [512, 3, 1]]        # 25 (1, 512, 20, 20) E - make channels same C3/P3

head:
############################################################################################BLOCK 1
    # P6 from P5
  - [25, 1, Conv, [512,3,2]]          # 26 (1, 512, 10, 10)
  
    # Generate P7 from P6 (ReLU + Downsampling)
  - [26, 1, Conv, [512, 3, 2]]        # 27 (1, 512, 5, 5)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #28 Upsample A -> (1, 512, 10, 10)
  - [[-1, 26], 1, BiFPN_Concat2, [1]]          #29(1, 512, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #30 (1, 512, 10, 10)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #31 Upsample -> (1, 512, 20, 20)
  - [[-1, 25], 1, BiFPN_Concat2, [1]]          #32 (1, 512, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #33 (1, 512, 20, 20)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #34 Upsample -> (1, 512, 40, 40)
  - [[-1, 22], 1, BiFPN_Concat2, [1]]          #35 (1, 512, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #36 (1, 512, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #37 Upsample -> (1, 512, 80, 80)
  - [[-1, 19], 1, BiFPN_Concat2, [1]]          #38 (1, 512, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]                 #39 (1, 512, 80, 80)

  - [-1, 1, Conv, [512, 3, 2]]               #40 Downsample ->(1, 512, 40, 40)
  - [[-1, 36, 22],1, BiFPN_Concat3, [1]]       #41 (1, 512, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]                 #42 (1, 512, 40, 40)

  - [-1, 1, Conv, [512, 3, 2]]               #43 (1, 512, 20, 20)
  - [[-1, 33, 25], 1, BiFPN_Concat3, [1]]      #44 (1, 512, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]                 #45 (1, 512, 20, 20)

  - [-1, 1, Conv, [512, 3, 2]]               #46 (1, 512, 10, 10)
  - [[-1, 30, 26], 1, BiFPN_Concat3, [1]]      #47 (1, 512, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]                 #48 (1, 512, 10, 10)

  - [-1, 1, Conv, [512, 3, 2]]               #49 (1, 512, 5, 5)
  - [[-1, 27], 1, BiFPN_Concat2, [1]]          #50 (1, 512, 5, 5)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]                 #51 (1, 512, 5, 5)

# # #########################################################################################BLOCK2
  
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #52 Upsample A -> (1, 512, 10, 10)
  - [[-1, 48], 1, BiFPN_Concat2, [1]]          #53 (1, 512, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #54 (1, 512, 10, 10)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #55 Upsample -> (1, 512, 20, 20)
  - [[-1, 45], 1, BiFPN_Concat2, [1]]          #56 (1, 512, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #57 (1, 512, 20, 20)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #58 Upsample -> (1, 512, 40, 40)
  - [[-1, 42], 1, BiFPN_Concat2, [1]]          #59 (1, 512, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #60 (1, 512, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #61 Upsample -> (1, 512, 80, 80)
  - [[-1, 39], 1, BiFPN_Concat2, [1]]          #62 (1, 512, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #63 (1, 512, 80, 80)

  - [-1, 1, Conv, [512, 3, 2]]              #64 Downsample ->(1, 512, 40, 40)
  - [[-1, 60, 42],1, BiFPN_Concat3, [1]]      #65 (1, 512, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #66 (1, 512, 40, 40)

  - [-1, 1, Conv, [512, 3, 2]]              #67 (1, 512, 20, 20)
  - [[-1, 57, 45], 1, BiFPN_Concat3, [1]]     #68 (1, 512, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #69 (1, 512, 20, 20)

  - [-1, 1, Conv, [512, 3, 2]]              #70 (1, 512, 10, 10)
  - [[-1, 54, 48], 1, BiFPN_Concat3, [1]]     #71 (1, 512, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #72 (1, 512, 10, 10)

  - [-1, 1, Conv, [512, 3, 2]]              #73 (1, 512, 5, 5)
  - [[-1, 51], 1, BiFPN_Concat2, [1]]         #74 (1, 512, 5, 5)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #75 (1, 512, 5, 5)
# ##########################################################################################BLOCK3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #76 Upsample A -> (1, 512, 10, 10)
  - [[-1, 72], 1, BiFPN_Concat2, [1]]          #77 (1, 512, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #78 (1, 512, 10, 10)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #79 Upsample -> (1, 512, 20, 20)
  - [[-1, 69], 1, BiFPN_Concat2, [1]]          #80 (1, 512, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #81 (1, 512, 20, 20)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #82 Upsample -> (1, 512, 40, 40)
  - [[-1, 66], 1, BiFPN_Concat2, [1]]          #83 (1, 512, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #84 (1, 512, 40, 40)

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #85 Upsample -> (1, 512, 80, 80)
  - [[-1, 63], 1, BiFPN_Concat2, [1]]          #86 (1, 512, 80, 80)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]   #87 (1, 512, 80, 80)

  - [-1, 1, Conv, [512, 3, 2]]              #88 Downsample ->(1, 512, 40, 40)
  - [[-1, 84, 66],1, BiFPN_Concat3, [1]]      #89 (1, 512, 40, 40)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #90 (1, 512, 40, 40)

  - [-1, 1, Conv, [512, 3, 2]]              #91 (1, 512, 20, 20)
  - [[-1, 81, 69], 1, BiFPN_Concat3, [1]]     #92 (1, 512, 20, 20)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #93 (1, 512, 20, 20)

  - [-1, 1, Conv, [512, 3, 2]]              #94 (1, 512, 10, 10)
  - [[-1, 78, 72], 1, BiFPN_Concat3, [1]]     #95 (1, 512, 10, 10)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #96 (1, 512, 10, 10)

  - [-1, 1, Conv, [512, 3, 2]]              #97 (1, 512, 5, 5)
  - [[-1, 75], 1, BiFPN_Concat2, [1]]         #98 (1, 512, 5, 5)
  - [-1, 1, DepthwiseConvBlock, [512, 3, 1]]  #99 (1, 512, 5, 5)

  
  # - [53, 1, C3k2, [512, True]] #57
  # - [56, 1, C3k2, [1024, True]] #58

  - [[87, 90, 93, 96, 99], 1, Detect, [nc]] # 52
